// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchGroupByTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "MatchGroupByType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByTypeQueryBuilder WithMatchGroupByHeroTypeFragment(MatchGroupByHeroTypeQueryBuilder matchGroupByHeroTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByFactionTypeFragment(MatchGroupByFactionTypeQueryBuilder matchGroupByFactionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByFactionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByKillsTypeFragment(MatchGroupByKillsTypeQueryBuilder matchGroupByKillsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByKillsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDeathsTypeFragment(MatchGroupByDeathsTypeQueryBuilder matchGroupByDeathsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDeathsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByAssistsTypeFragment(MatchGroupByAssistsTypeQueryBuilder matchGroupByAssistsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByAssistsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsLeaverTypeFragment(MatchGroupByIsLeaverTypeQueryBuilder matchGroupByIsLeaverTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsLeaverTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLevelTypeFragment(MatchGroupByLevelTypeQueryBuilder matchGroupByLevelTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLevelTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsPartyTypeFragment(MatchGroupByIsPartyTypeQueryBuilder matchGroupByIsPartyTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsPartyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsRandomTypeFragment(MatchGroupByIsRandomTypeQueryBuilder matchGroupByIsRandomTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsRandomTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLaneTypeFragment(MatchGroupByLaneTypeQueryBuilder matchGroupByLaneTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLaneTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByRoleTypeFragment(MatchGroupByRoleTypeQueryBuilder matchGroupByRoleTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByRoleTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsIntentionalFeedingTypeFragment(MatchGroupByIsIntentionalFeedingTypeQueryBuilder matchGroupByIsIntentionalFeedingTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsIntentionalFeedingTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByAwardTypeFragment(MatchGroupByAwardTypeQueryBuilder matchGroupByAwardTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByAwardTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByRoamLaneTypeFragment(MatchGroupByRoamLaneTypeQueryBuilder matchGroupByRoamLaneTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByRoamLaneTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsVictoryTypeFragment(MatchGroupByIsVictoryTypeQueryBuilder matchGroupByIsVictoryTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsVictoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDurationMinutesTypeFragment(MatchGroupByDurationMinutesTypeQueryBuilder matchGroupByDurationMinutesTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDurationMinutesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByClusterTypeFragment(MatchGroupByClusterTypeQueryBuilder matchGroupByClusterTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByClusterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByRegionTypeFragment(MatchGroupByRegionTypeQueryBuilder matchGroupByRegionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByRegionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLobbyTypeTypeFragment(MatchGroupByLobbyTypeTypeQueryBuilder matchGroupByLobbyTypeTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLobbyTypeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsLeagueTypeFragment(MatchGroupByIsLeagueTypeQueryBuilder matchGroupByIsLeagueTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsLeagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsSeriesTypeFragment(MatchGroupByIsSeriesTypeQueryBuilder matchGroupByIsSeriesTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsSeriesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByGameModeTypeFragment(MatchGroupByGameModeTypeQueryBuilder matchGroupByGameModeTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByGameModeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsStatsTypeFragment(MatchGroupByIsStatsTypeQueryBuilder matchGroupByIsStatsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByGameVersionTypeFragment(MatchGroupByGameVersionTypeQueryBuilder matchGroupByGameVersionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByGameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByTeamTypeFragment(MatchGroupByTeamTypeQueryBuilder matchGroupByTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByHeroPerformanceTypeFragment(MatchGroupByHeroPerformanceTypeQueryBuilder matchGroupByHeroPerformanceTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByHeroPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdTypeFragment(MatchGroupBySteamAccountIdTypeQueryBuilder matchGroupBySteamAccountIdTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdHeroIdTypeFragment(MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder matchGroupBySteamAccountIdHeroIdTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdHeroIdTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdWithTeamTypeFragment(MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder matchGroupBySteamAccountIdWithTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdWithTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdHeroIdWithTeamTypeFragment(MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder matchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdAgainstTeamTypeFragment(MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder matchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdHeroIdAgainstTeamTypeFragment(MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder matchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLeagueIdTypeFragment(MatchGroupByLeagueIdTypeQueryBuilder matchGroupByLeagueIdTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLeagueIdTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByPositionTypeFragment(MatchGroupByPositionTypeQueryBuilder matchGroupByPositionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByPositionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDateDayTypeFragment(MatchGroupByDateDayTypeQueryBuilder matchGroupByDateDayTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDateDayTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDateDayHeroTypeFragment(MatchGroupByDateDayHeroTypeQueryBuilder matchGroupByDateDayHeroTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDateDayHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByTotalKillsTypeFragment(MatchGroupByTotalKillsTypeQueryBuilder matchGroupByTotalKillsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByTotalKillsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByGoldPerMinuteTypeFragment(MatchGroupByGoldPerMinuteTypeQueryBuilder matchGroupByGoldPerMinuteTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByGoldPerMinuteTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByHourTypeFragment(MatchGroupByHourTypeQueryBuilder matchGroupByHourTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByHourTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }
}
