// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class FollowerTypeQueryBuilder : GraphQlQueryBuilder<FollowerTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "captainJackIdentityId", IsComplex = true },
                new FieldMetadata { Name = "captainJackIdentityProfile", IsComplex = true, QueryBuilderType = typeof(CaptainJackIdentityPublicProfileTypeQueryBuilder) },
                new FieldMetadata { Name = "steamAccountId", IsComplex = true },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "feedLevel", IsComplex = true },
                new FieldMetadata { Name = "emailLevel", IsComplex = true },
                new FieldMetadata { Name = "dailyEmail" },
                new FieldMetadata { Name = "weeklyEmail" },
                new FieldMetadata { Name = "monthlyEmail" },
                new FieldMetadata { Name = "isFavorite" },
                new FieldMetadata { Name = "lastEmail", IsComplex = true },
                new FieldMetadata { Name = "didManualUpdate" }
            };

        protected override string TypeName { get { return "FollowerType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FollowerTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public FollowerTypeQueryBuilder WithCaptainJackIdentityProfile(CaptainJackIdentityPublicProfileTypeQueryBuilder captainJackIdentityPublicProfileTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("captainJackIdentityProfile", alias, captainJackIdentityPublicProfileTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptCaptainJackIdentityProfile()
        {
            return ExceptField("captainJackIdentityProfile");
        }

        public FollowerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public FollowerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public FollowerTypeQueryBuilder WithFeedLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptFeedLevel()
        {
            return ExceptField("feedLevel");
        }

        public FollowerTypeQueryBuilder WithEmailLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptEmailLevel()
        {
            return ExceptField("emailLevel");
        }

        public FollowerTypeQueryBuilder WithDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptDailyEmail()
        {
            return ExceptField("dailyEmail");
        }

        public FollowerTypeQueryBuilder WithWeeklyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weeklyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptWeeklyEmail()
        {
            return ExceptField("weeklyEmail");
        }

        public FollowerTypeQueryBuilder WithMonthlyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("monthlyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptMonthlyEmail()
        {
            return ExceptField("monthlyEmail");
        }

        public FollowerTypeQueryBuilder WithIsFavorite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavorite", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptIsFavorite()
        {
            return ExceptField("isFavorite");
        }

        public FollowerTypeQueryBuilder WithLastEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptLastEmail()
        {
            return ExceptField("lastEmail");
        }

        public FollowerTypeQueryBuilder WithDidManualUpdate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didManualUpdate", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptDidManualUpdate()
        {
            return ExceptField("didManualUpdate");
        }
    }
}
