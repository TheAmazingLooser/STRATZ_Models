// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchPlayerTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matchId", IsComplex = true },
                new FieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new FieldMetadata { Name = "playerSlot", IsComplex = true },
                new FieldMetadata { Name = "steamAccountId", IsComplex = true },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new FieldMetadata { Name = "isRadiant" },
                new FieldMetadata { Name = "isVictory" },
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "gameVersionId", IsComplex = true },
                new FieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new FieldMetadata { Name = "kills", IsComplex = true },
                new FieldMetadata { Name = "deaths", IsComplex = true },
                new FieldMetadata { Name = "assists", IsComplex = true },
                new FieldMetadata { Name = "leaverStatus" },
                new FieldMetadata { Name = "numLastHits", IsComplex = true },
                new FieldMetadata { Name = "numDenies", IsComplex = true },
                new FieldMetadata { Name = "goldPerMinute", IsComplex = true },
                new FieldMetadata { Name = "networth" },
                new FieldMetadata { Name = "experiencePerMinute", IsComplex = true },
                new FieldMetadata { Name = "level", IsComplex = true },
                new FieldMetadata { Name = "gold" },
                new FieldMetadata { Name = "goldSpent" },
                new FieldMetadata { Name = "heroDamage" },
                new FieldMetadata { Name = "towerDamage" },
                new FieldMetadata { Name = "heroHealing" },
                new FieldMetadata { Name = "partyId", IsComplex = true },
                new FieldMetadata { Name = "isRandom" },
                new FieldMetadata { Name = "lane" },
                new FieldMetadata { Name = "position" },
                new FieldMetadata { Name = "streakPrediction", IsComplex = true },
                new FieldMetadata { Name = "intentionalFeeding" },
                new FieldMetadata { Name = "role" },
                new FieldMetadata { Name = "roleBasic" },
                new FieldMetadata { Name = "imp", IsComplex = true },
                new FieldMetadata { Name = "award" },
                new FieldMetadata { Name = "item0Id", IsComplex = true },
                new FieldMetadata { Name = "item1Id", IsComplex = true },
                new FieldMetadata { Name = "item2Id", IsComplex = true },
                new FieldMetadata { Name = "item3Id", IsComplex = true },
                new FieldMetadata { Name = "item4Id", IsComplex = true },
                new FieldMetadata { Name = "item5Id", IsComplex = true },
                new FieldMetadata { Name = "backpack0Id", IsComplex = true },
                new FieldMetadata { Name = "backpack1Id", IsComplex = true },
                new FieldMetadata { Name = "backpack2Id", IsComplex = true },
                new FieldMetadata { Name = "neutral0Id", IsComplex = true },
                new FieldMetadata { Name = "behavior", IsComplex = true },
                new FieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsTypeQueryBuilder) },
                new FieldMetadata { Name = "playbackData", IsComplex = true, QueryBuilderType = typeof(MatchPlayerPlaybackDataTypeQueryBuilder) },
                new FieldMetadata { Name = "heroAverage", IsComplex = true, QueryBuilderType = typeof(HeroPositionTimeDetailTypeQueryBuilder) },
                new FieldMetadata { Name = "additionalUnit", IsComplex = true, QueryBuilderType = typeof(MatchPlayerAdditionalUnitTypeQueryBuilder) },
                new FieldMetadata { Name = "dotaPlus", IsComplex = true, QueryBuilderType = typeof(HeroDotaPlusLeaderboardRankTypeQueryBuilder) },
                new FieldMetadata { Name = "abilities", IsComplex = true, QueryBuilderType = typeof(PlayerAbilityTypeQueryBuilder) },
                new FieldMetadata { Name = "invisibleSeconds" },
                new FieldMetadata { Name = "dotaPlusHeroXp" },
                new FieldMetadata { Name = "variant", IsComplex = true }
            };

        protected override string TypeName { get { return "MatchPlayerType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchPlayerTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public MatchPlayerTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public MatchPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchPlayerTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchPlayerTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public MatchPlayerTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchPlayerTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchPlayerTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchPlayerTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public MatchPlayerTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public MatchPlayerTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public MatchPlayerTypeQueryBuilder WithLeaverStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaverStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptLeaverStatus()
        {
            return ExceptField("leaverStatus");
        }

        public MatchPlayerTypeQueryBuilder WithNumLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNumLastHits()
        {
            return ExceptField("numLastHits");
        }

        public MatchPlayerTypeQueryBuilder WithNumDenies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDenies", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNumDenies()
        {
            return ExceptField("numDenies");
        }

        public MatchPlayerTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchPlayerTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public MatchPlayerTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public MatchPlayerTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchPlayerTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerTypeQueryBuilder WithGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGoldSpent()
        {
            return ExceptField("goldSpent");
        }

        public MatchPlayerTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public MatchPlayerTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public MatchPlayerTypeQueryBuilder WithHeroHealing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealing", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroHealing()
        {
            return ExceptField("heroHealing");
        }

        public MatchPlayerTypeQueryBuilder WithPartyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("partyId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPartyId()
        {
            return ExceptField("partyId");
        }

        public MatchPlayerTypeQueryBuilder WithIsRandom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRandom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIsRandom()
        {
            return ExceptField("isRandom");
        }

        public MatchPlayerTypeQueryBuilder WithLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lane", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptLane()
        {
            return ExceptField("lane");
        }

        public MatchPlayerTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public MatchPlayerTypeQueryBuilder WithStreakPrediction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streakPrediction", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptStreakPrediction()
        {
            return ExceptField("streakPrediction");
        }

        public MatchPlayerTypeQueryBuilder WithIntentionalFeeding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("intentionalFeeding", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIntentionalFeeding()
        {
            return ExceptField("intentionalFeeding");
        }

        public MatchPlayerTypeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public MatchPlayerTypeQueryBuilder WithRoleBasic(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleBasic", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptRoleBasic()
        {
            return ExceptField("roleBasic");
        }

        public MatchPlayerTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public MatchPlayerTypeQueryBuilder WithAward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("award", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptAward()
        {
            return ExceptField("award");
        }

        public MatchPlayerTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public MatchPlayerTypeQueryBuilder WithBackpack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBackpack0Id()
        {
            return ExceptField("backpack0Id");
        }

        public MatchPlayerTypeQueryBuilder WithBackpack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBackpack1Id()
        {
            return ExceptField("backpack1Id");
        }

        public MatchPlayerTypeQueryBuilder WithBackpack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBackpack2Id()
        {
            return ExceptField("backpack2Id");
        }

        public MatchPlayerTypeQueryBuilder WithNeutral0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutral0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNeutral0Id()
        {
            return ExceptField("neutral0Id");
        }

        public MatchPlayerTypeQueryBuilder WithBehavior(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behavior", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBehavior()
        {
            return ExceptField("behavior");
        }

        public MatchPlayerTypeQueryBuilder WithStats(MatchPlayerStatsTypeQueryBuilder matchPlayerStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, matchPlayerStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public MatchPlayerTypeQueryBuilder WithPlaybackData(MatchPlayerPlaybackDataTypeQueryBuilder matchPlayerPlaybackDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playbackData", alias, matchPlayerPlaybackDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPlaybackData()
        {
            return ExceptField("playbackData");
        }

        public MatchPlayerTypeQueryBuilder WithHeroAverage(HeroPositionTimeDetailTypeQueryBuilder heroPositionTimeDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroAverage", alias, heroPositionTimeDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroAverage()
        {
            return ExceptField("heroAverage");
        }

        public MatchPlayerTypeQueryBuilder WithAdditionalUnit(MatchPlayerAdditionalUnitTypeQueryBuilder matchPlayerAdditionalUnitTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("additionalUnit", alias, matchPlayerAdditionalUnitTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptAdditionalUnit()
        {
            return ExceptField("additionalUnit");
        }

        public MatchPlayerTypeQueryBuilder WithDotaPlus(HeroDotaPlusLeaderboardRankTypeQueryBuilder heroDotaPlusLeaderboardRankTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dotaPlus", alias, heroDotaPlusLeaderboardRankTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptDotaPlus()
        {
            return ExceptField("dotaPlus");
        }

        public MatchPlayerTypeQueryBuilder WithAbilities(PlayerAbilityTypeQueryBuilder playerAbilityTypeQueryBuilder, QueryBuilderParameter<int?> gameVerionId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVerionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVerionId", ArgumentValue = gameVerionId} );

            return WithObjectField("abilities", alias, playerAbilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchPlayerTypeQueryBuilder ExceptAbilities()
        {
            return ExceptField("abilities");
        }

        public MatchPlayerTypeQueryBuilder WithInvisibleSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("invisibleSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptInvisibleSeconds()
        {
            return ExceptField("invisibleSeconds");
        }

        public MatchPlayerTypeQueryBuilder WithDotaPlusHeroXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dotaPlusHeroXp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptDotaPlusHeroXp()
        {
            return ExceptField("dotaPlusHeroXp");
        }

        public MatchPlayerTypeQueryBuilder WithVariant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("variant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptVariant()
        {
            return ExceptField("variant");
        }
    }
}
