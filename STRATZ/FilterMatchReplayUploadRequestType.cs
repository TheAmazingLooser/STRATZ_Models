// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class FilterMatchReplayUploadRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _withEnemySteamAccount;
        private InputPropertyInfo _withFriendHeroId;
        private InputPropertyInfo _withEnemyHeroId;
        private InputPropertyInfo _withFriendBannedHeroId;
        private InputPropertyInfo _withEnemyBannedHeroId;
        private InputPropertyInfo _byMatchId;
        private InputPropertyInfo _byMatchIds;
        private InputPropertyInfo _byMatchUploadFileName;
        private InputPropertyInfo _byMatchUploadUploaderCaptainJackId;
        private InputPropertyInfo _bySteamAccountId;
        private InputPropertyInfo _bySteamAccountIds;
        private InputPropertyInfo _byHeroId;
        private InputPropertyInfo _byLeagueId;
        private InputPropertyInfo _bySeriesId;
        private InputPropertyInfo _bySeriesIds;
        private InputPropertyInfo _byTeamId;
        private InputPropertyInfo _byGameMode;
        private InputPropertyInfo _byLobbyType;
        private InputPropertyInfo _byGameVersion;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _isValidated;
        private InputPropertyInfo _isComplete;
        private InputPropertyInfo _isActive;
        private InputPropertyInfo _isVictory;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _filterPositionIsUs;
        private InputPropertyInfo _filterPosition;
        private InputPropertyInfo _filterPositionOrder;
        private InputPropertyInfo _isRadiantFirstPick;
        private InputPropertyInfo _firstPick;
        private InputPropertyInfo _minDuration;
        private InputPropertyInfo _maxDuration;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> WithEnemySteamAccount
        {
            get { return (QueryBuilderParameter<IList<object>>)_withEnemySteamAccount.Value; }
            set { _withEnemySteamAccount = new InputPropertyInfo { Name = "withEnemySteamAccount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> WithFriendHeroId
        {
            get { return (QueryBuilderParameter<IList<object>>)_withFriendHeroId.Value; }
            set { _withFriendHeroId = new InputPropertyInfo { Name = "withFriendHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> WithEnemyHeroId
        {
            get { return (QueryBuilderParameter<IList<object>>)_withEnemyHeroId.Value; }
            set { _withEnemyHeroId = new InputPropertyInfo { Name = "withEnemyHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> WithFriendBannedHeroId
        {
            get { return (QueryBuilderParameter<IList<object>>)_withFriendBannedHeroId.Value; }
            set { _withFriendBannedHeroId = new InputPropertyInfo { Name = "withFriendBannedHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> WithEnemyBannedHeroId
        {
            get { return (QueryBuilderParameter<IList<object>>)_withEnemyBannedHeroId.Value; }
            set { _withEnemyBannedHeroId = new InputPropertyInfo { Name = "withEnemyBannedHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ByMatchId
        {
            get { return (QueryBuilderParameter<string>)_byMatchId.Value; }
            set { _byMatchId = new InputPropertyInfo { Name = "byMatchId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> ByMatchIds
        {
            get { return (QueryBuilderParameter<IList<object>>)_byMatchIds.Value; }
            set { _byMatchIds = new InputPropertyInfo { Name = "byMatchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ByMatchUploadFileName
        {
            get { return (QueryBuilderParameter<string>)_byMatchUploadFileName.Value; }
            set { _byMatchUploadFileName = new InputPropertyInfo { Name = "byMatchUploadFileName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> ByMatchUploadUploaderCaptainJackId
        {
            get { return (QueryBuilderParameter<object>)_byMatchUploadUploaderCaptainJackId.Value; }
            set { _byMatchUploadUploaderCaptainJackId = new InputPropertyInfo { Name = "byMatchUploadUploaderCaptainJackId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> BySteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_bySteamAccountId.Value; }
            set { _bySteamAccountId = new InputPropertyInfo { Name = "bySteamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> BySteamAccountIds
        {
            get { return (QueryBuilderParameter<IList<object>>)_bySteamAccountIds.Value; }
            set { _bySteamAccountIds = new InputPropertyInfo { Name = "bySteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> ByHeroId
        {
            get { return (QueryBuilderParameter<IList<object>>)_byHeroId.Value; }
            set { _byHeroId = new InputPropertyInfo { Name = "byHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ByLeagueId
        {
            get { return (QueryBuilderParameter<int?>)_byLeagueId.Value; }
            set { _byLeagueId = new InputPropertyInfo { Name = "byLeagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BySeriesId
        {
            get { return (QueryBuilderParameter<string>)_bySeriesId.Value; }
            set { _bySeriesId = new InputPropertyInfo { Name = "bySeriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<object>>))]
        #endif
        public QueryBuilderParameter<IList<object>> BySeriesIds
        {
            get { return (QueryBuilderParameter<IList<object>>)_bySeriesIds.Value; }
            set { _bySeriesIds = new InputPropertyInfo { Name = "bySeriesIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ByTeamId
        {
            get { return (QueryBuilderParameter<int?>)_byTeamId.Value; }
            set { _byTeamId = new InputPropertyInfo { Name = "byTeamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<int>>))]
        #endif
        public QueryBuilderParameter<IList<int>> ByGameMode
        {
            get { return (QueryBuilderParameter<IList<int>>)_byGameMode.Value; }
            set { _byGameMode = new InputPropertyInfo { Name = "byGameMode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<int>>))]
        #endif
        public QueryBuilderParameter<IList<int>> ByLobbyType
        {
            get { return (QueryBuilderParameter<IList<int>>)_byLobbyType.Value; }
            set { _byLobbyType = new InputPropertyInfo { Name = "byLobbyType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<int>>))]
        #endif
        public QueryBuilderParameter<IList<int>> ByGameVersion
        {
            get { return (QueryBuilderParameter<IList<int>>)_byGameVersion.Value; }
            set { _byGameVersion = new InputPropertyInfo { Name = "byGameVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsValidated
        {
            get { return (QueryBuilderParameter<bool?>)_isValidated.Value; }
            set { _isValidated = new InputPropertyInfo { Name = "isValidated", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsComplete
        {
            get { return (QueryBuilderParameter<bool?>)_isComplete.Value; }
            set { _isComplete = new InputPropertyInfo { Name = "isComplete", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsActive
        {
            get { return (QueryBuilderParameter<bool?>)_isActive.Value; }
            set { _isActive = new InputPropertyInfo { Name = "isActive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsVictory
        {
            get { return (QueryBuilderParameter<bool?>)_isVictory.Value; }
            set { _isVictory = new InputPropertyInfo { Name = "isVictory", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> FilterPositionIsUs
        {
            get { return (QueryBuilderParameter<bool?>)_filterPositionIsUs.Value; }
            set { _filterPositionIsUs = new InputPropertyInfo { Name = "filterPositionIsUs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> FilterPosition
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_filterPosition.Value; }
            set { _filterPosition = new InputPropertyInfo { Name = "filterPosition", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IList<MatchPlayerTeamPickOrderType>>))]
        #endif
        public QueryBuilderParameter<IList<MatchPlayerTeamPickOrderType>> FilterPositionOrder
        {
            get { return (QueryBuilderParameter<IList<MatchPlayerTeamPickOrderType>>)_filterPositionOrder.Value; }
            set { _filterPositionOrder = new InputPropertyInfo { Name = "filterPositionOrder", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiantFirstPick
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiantFirstPick.Value; }
            set { _isRadiantFirstPick = new InputPropertyInfo { Name = "isRadiantFirstPick", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> FirstPick
        {
            get { return (QueryBuilderParameter<bool?>)_firstPick.Value; }
            set { _firstPick = new InputPropertyInfo { Name = "firstPick", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MinDuration
        {
            get { return (QueryBuilderParameter<string>)_minDuration.Value; }
            set { _minDuration = new InputPropertyInfo { Name = "minDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MaxDuration
        {
            get { return (QueryBuilderParameter<string>)_maxDuration.Value; }
            set { _maxDuration = new InputPropertyInfo { Name = "maxDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MinGameVersionId
        {
            get { return (QueryBuilderParameter<string>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<string>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_withEnemySteamAccount.Name != null) yield return _withEnemySteamAccount;
            if (_withFriendHeroId.Name != null) yield return _withFriendHeroId;
            if (_withEnemyHeroId.Name != null) yield return _withEnemyHeroId;
            if (_withFriendBannedHeroId.Name != null) yield return _withFriendBannedHeroId;
            if (_withEnemyBannedHeroId.Name != null) yield return _withEnemyBannedHeroId;
            if (_byMatchId.Name != null) yield return _byMatchId;
            if (_byMatchIds.Name != null) yield return _byMatchIds;
            if (_byMatchUploadFileName.Name != null) yield return _byMatchUploadFileName;
            if (_byMatchUploadUploaderCaptainJackId.Name != null) yield return _byMatchUploadUploaderCaptainJackId;
            if (_bySteamAccountId.Name != null) yield return _bySteamAccountId;
            if (_bySteamAccountIds.Name != null) yield return _bySteamAccountIds;
            if (_byHeroId.Name != null) yield return _byHeroId;
            if (_byLeagueId.Name != null) yield return _byLeagueId;
            if (_bySeriesId.Name != null) yield return _bySeriesId;
            if (_bySeriesIds.Name != null) yield return _bySeriesIds;
            if (_byTeamId.Name != null) yield return _byTeamId;
            if (_byGameMode.Name != null) yield return _byGameMode;
            if (_byLobbyType.Name != null) yield return _byLobbyType;
            if (_byGameVersion.Name != null) yield return _byGameVersion;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_isValidated.Name != null) yield return _isValidated;
            if (_isComplete.Name != null) yield return _isComplete;
            if (_isActive.Name != null) yield return _isActive;
            if (_isVictory.Name != null) yield return _isVictory;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_filterPositionIsUs.Name != null) yield return _filterPositionIsUs;
            if (_filterPosition.Name != null) yield return _filterPosition;
            if (_filterPositionOrder.Name != null) yield return _filterPositionOrder;
            if (_isRadiantFirstPick.Name != null) yield return _isRadiantFirstPick;
            if (_firstPick.Name != null) yield return _firstPick;
            if (_minDuration.Name != null) yield return _minDuration;
            if (_maxDuration.Name != null) yield return _maxDuration;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }
}
